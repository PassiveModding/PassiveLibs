using System;
using System.Collections.Generic;
using System.IO;
using CommandLine;
using Newtonsoft.Json;

namespace Passive.Discord.Setup
{
    public class Config
    {
        public static string FilesPath = Path.Combine(AppContext.BaseDirectory, "files");

        private static string savePath = Path.Combine(FilesPath, "config.json");

        public enum Defaults
        {
            Token,

            Prefix,

            ShardCount
        }

        public Dictionary<string, string> Entries { get; set; } = new Dictionary<string, string>();

        public static Config LoadFromFile(string path)
        {
            Config config;
            if (path == null)
            {
                path = savePath;
            }

            EnsureFilesDirectoryCreated();

            if (File.Exists(path))
            {
                var file = File.ReadAllText(path);
                config = JsonConvert.DeserializeObject<Config>(file);
                savePath = path;
            }
            else
            {
                config = GenerateAndSaveDefaultConfig(path);
            }

            return config;
        }

        public static Config ParseArguments(string[] args = null)
        {
            Config config = null;
            if (args != null)
            {
                Parser.Default.ParseArguments<Options>(args)
                    .WithParsed(o =>
                    {
                        config = LoadFromFile(o.ConfigPath);
                    });
            }
            else
            {
                EnsureFilesDirectoryCreated();
            }

            config ??= LoadFromFile(null);
            return config;
        }

        private static void EnsureFilesDirectoryCreated()
        {
            if (!Directory.Exists(FilesPath))
            {
                Directory.CreateDirectory(FilesPath);
            }
        }

        /// <summary>
        /// Gets the specified entry or adds it and saves the config, returning the newly generated value.
        /// Will also check for the relevant environment variable
        /// </summary>
        /// <param name="key">The identification key used to locate the value.</param>
        /// <param name="generationMethod">A function used in order to generate a new value for the given key.</param>
        /// <returns>The specified entry for the given key.</returns>
        public string GetOrAddEntry(string key, Func<string> generationMethod)
        {
            var value = Environment.GetEnvironmentVariable(key);
            if (value == null)
            {
                if (!Entries.ContainsKey(key))
                {
                    Entries.Add(key, generationMethod());
                    Save();
                }

                return Entries[key];
            }
            else
            {
                Entries[key] = value;
                Save();
                return value;
            }
        }

        /// <summary>
        /// Saves the config to the last save path (generated by the LoadFromFile method).
        /// </summary>
        public void Save()
        {
            File.WriteAllText(savePath, JsonConvert.SerializeObject(this, Formatting.Indented));
        }

        private static Config GenerateAndSaveDefaultConfig(string path)
        {
            savePath = path;
            var config = new Config();
            File.WriteAllText(path, JsonConvert.SerializeObject(config));
            return config;
        }
    }
}