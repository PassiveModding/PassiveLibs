using System;
using System.Collections.Generic;
using System.IO;
using CommandLine;
using Newtonsoft.Json;

namespace Passive.Discord.Setup
{
    public partial class Config
    {
        public Dictionary<string, string> Entries { get; set; } = new Dictionary<string, string>();

        /// <summary>
        /// Gets the specified entry or adds it and saves the config, returning the newly generated value.
        /// Will also check for the relevant environment variable
        /// </summary>
        /// <param name="key">The identification key used to locate the value.</param>
        /// <param name="generationMethod">A function used in order to generate a new value for the given key.</param>
        /// <returns>The specified entry for the given key.</returns>
        public string GetOrAddEntry(string key, Func<string> generationMethod)
        {
            var value = Environment.GetEnvironmentVariable(key);
            if (value == null)
            {
                if (!Entries.ContainsKey(key))
                {
                    Entries.Add(key, generationMethod());
                    Save();
                }

                return Entries[key];
            }
            else
            {
                Entries[key] = value;
                Save();
                return value;
            }
        }

        public string GetOptional(string key, string defaultValue)
        {
            var environmentVariable = Environment.GetEnvironmentVariable(key);
            if (environmentVariable == null)
            {
                if (!Entries.ContainsKey(key))
                {
                    return defaultValue;
                }

                return Entries[key];
            }
            else
            {
                return environmentVariable;
            }
        }

        /// <summary>
        /// Saves the config to the last save path (generated by the LoadFromFile method).
        /// </summary>
        public void Save()
        {
            File.WriteAllText(savePath, JsonConvert.SerializeObject(this, Formatting.Indented));
        }
    }
}